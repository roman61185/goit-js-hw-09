{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAaC,SAASC,cAAc,6BACpCC,EAAYF,SAASC,cAAc,4BACnCE,EAAcH,SAASC,cAAc,8BACrCG,EAAOJ,SAASC,cAAc,SAmBpC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAYb,SAASQ,GAAUT,SAAEA,EAAQC,MAAEA,IAC7BS,EAAAnB,GAASoB,OAAOC,QAAQ,uBAAqBZ,QAAiBC,M,CAGhE,SAASY,GAASb,SAAEA,EAAQC,MAAEA,IAC5BS,EAAAnB,GAASoB,OAAOG,QAAQ,sBAAoBd,QAAiBC,M,CA3C/Dc,QAAQC,IAAIlB,GACZiB,QAAQC,IAAIvB,GACZsB,QAAQC,IAAIpB,GACZmB,QAAQC,IAAInB,GAGZC,EAAKmB,iBAAiB,UAAWC,IAC/BA,EAAIC,iBAEJ,MAAMC,EAAc,CAClBC,WAAYC,OAAOJ,EAAIK,OAAOC,SAASvB,MAAMwB,OAC7CC,UAAWJ,OAAOJ,EAAIK,OAAOC,SAASG,KAAKF,OAC3CG,YAAaN,OAAOJ,EAAIK,OAAOC,SAASK,OAAOJ,SAkBnD,SAAkBK,EAAYC,EAAWC,GACvC,IAAK,IAAIC,EAAI,EAAGA,GAAKD,EAAaC,GAAK,EAAGH,GAAcC,EACtDhC,EAAckC,EAAGH,GACdI,KAAKzB,GACL0B,MAAMtB,E,CApBXuB,CAAShB,EAAYC,WAAYD,EAAYM,UAAWN,EAAYQ,YAAY","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst inputDelay = document.querySelector('.form input[name=\"delay\"]');\nconst inputStep = document.querySelector('.form input[name=\"step\"]');\nconst inputAmount = document.querySelector('.form input[name=\"amount\"]');\nconst form = document.querySelector('.form');\n\nconsole.log(form);\nconsole.log(inputDelay);\nconsole.log(inputStep);\nconsole.log(inputAmount);\n\n\nform.addEventListener('submit', (evt) => {\n  evt.preventDefault();\n\n  const enterNumber = {\n    inputDelay: Number(evt.target.elements.delay.value),\n    inputStep: Number(evt.target.elements.step.value),\n    inputAmount: Number(evt.target.elements.amount.value),\n  };\n  onSubmit(enterNumber.inputDelay, enterNumber.inputStep, enterNumber.inputAmount);\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n};\n\nfunction onSubmit(inputDelay, inputStep, inputAmount) {\n  for (let i = 1; i <= inputAmount; i += 1, inputDelay += inputStep) {\n    createPromise(i, inputDelay)\n      .then(onResolve)\n      .catch(onReject);\n  }\n};\n\nfunction onResolve({ position, delay }) {\n  Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n};\n\nfunction onReject({ position, delay }) {\n  Notiflix.Notify.warning(`❌ Rejected promise ${position} in ${delay}ms`);\n};\n\n\n\n\n\n// const enterNumber = {\n//   inputDelay: Number(evt.target.elements.inputDelay.value),\n// }\n// console.log(enterNumber)\n\n\n\n// const inputDelay = document.querySelector('.form input[name=\"delay\"]');\n// const inputStep = document.querySelector('.form input[name=\"step\"]');\n// const inputAmount = document.querySelector('.form input[name=\"amount\"]');\n// const btnSubmit = document.querySelector('.form button[type=\"submit\"]');\n\n// console.log(inputDelay)\n// console.log(inputStep)\n// console.log(inputAmount)\n// console.log(btnSubmit)\n\n// сделать переменую для инпутов значений\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     window.alert(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   } else {\n//     window.alert(`❌ Rejected promise ${position} in ${delay}ms`);\n//   }\n// }\n\n// createPromise(4, 2222)\n//   .then(({ position, delay }) => {\n\n\n//   })\n//   .catch(({ position, delay }) => {\n\n//   });\n\n\n\n\n\n\n\n\n// const promise = new Promise((resolve, reject) => {\n//   const shouldResolve = Math.random() > 0.3;\n//   setTimeout(() => {\n//     if (shouldResolve) {\n//       resolve('віполнился');\n//     } else {\n//       reject('не выполнился');\n//     }\n//   }, 2000);\n// })\n\n// promise.then(\n//   result => {\n//     console.log(`✅ Fulfilled promise`);\n//   },\n//   error => {\n//     console.log(`❌ Rejected promise`);\n//   }\n// )\n\n// const promise = new Promise((resolve, reject) => {\n//   //resolve({ key: 'value' })\n//   resolve(null)\n// });\n\n// promise\n//   .then((response) => {\n//     console.log('1', response);\n//     // return { key: 'result then' }\n//     return Object.keys(response)\n//   })\n//   .catch(error => {\n//     console.log('error', error)\n//     return [];\n//   })\n//   .then((response) => {\n//     console.log('2', response)\n//     return response.map(i => `Item ${i}`)\n//   })\n//   .catch(error => {\n//     console.log('error', error)\n//   })\n//   .then((response) => {\n//     console.log('3', response)\n//   })\n\n\n// Promise.resolve({ key: 'value' })\n//   .then(res => {\n//     console.log(res)\n//     return Object.keys(res);\n//   })\n//   .catch(err => console.log(err))\n\n\n// Promise.allSettled([\n//   Promise.resolve({ key: 'value1' }),\n//   Promise.reject('error'),\n//   Promise.resolve({ key: 'value2' })\n// ])\n//   .then(response => {\n//     console.log(response)\n//   })\n//   .catch(error => {\n//     console.log(error)\n//   }) \n\n\n\n// const timeout = (delay, data) => new Promise((resolve) => {\n//   setTimeout(() => {\n//     resolve(data);\n//   }, delay);\n// });\n\n// //timeout(5000, { data: 'data1' }).then(response => console.log(response))\n\n// const timeouts = Promise.all([\n//   timeout(3000, { data: 'data 1' }),\n//   timeout(1000, { data: 'data 2' }),\n//   timeout(5000, { data: 'data 3' })\n// ])\n// timeouts.then(response => console.log(response))\n\n// const firstTimeout = Promise.race([\n//   timeout(3000, { data: 'data 1' }),\n//   timeout(1000, { data: 'data 2' }),\n//   timeout(5000, { data: 'data 3' }),\n//   Promise.reject({ error: 'error' })\n// ]);\n// firstTimeout\n//   .then(response => console.log(response))\n//   .catch(error => console.log(error))\n\n\n\n\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$inputDelay","document","querySelector","$47d4ff9957288465$var$inputStep","$47d4ff9957288465$var$inputAmount","$47d4ff9957288465$var$form","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$47d4ff9957288465$var$onResolve","$parcel$interopDefault","Notify","success","$47d4ff9957288465$var$onReject","warning","console","log","addEventListener","evt","preventDefault","enterNumber","inputDelay","Number","target","elements","value","inputStep","step","inputAmount","amount","inputDelay1","inputStep1","inputAmount1","i","then","catch","$47d4ff9957288465$var$onSubmit"],"version":3,"file":"03-promises.5d9ee7e8.js.map"}